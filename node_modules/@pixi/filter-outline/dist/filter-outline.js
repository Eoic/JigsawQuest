"use strict";/*!
 * @pixi/filter-outline - v5.2.0
 * Compiled Tue, 28 Feb 2023 14:24:35 UTC
 *
 * @pixi/filter-outline is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */Object.defineProperty(exports,"__esModule",{value:!0});var i=require("@pixi/core"),l=`attribute vec2 aVertexPosition;
attribute vec2 aTextureCoord;

uniform mat3 projectionMatrix;

varying vec2 vTextureCoord;

void main(void)
{
    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);
    vTextureCoord = aTextureCoord;
}`,u=`varying vec2 vTextureCoord;
uniform sampler2D uSampler;
uniform vec4 filterClamp;

uniform float uAlpha;
uniform vec2 uThickness;
uniform vec4 uColor;
uniform bool uKnockout;

const float DOUBLE_PI = 2. * 3.14159265358979323846264;
const float ANGLE_STEP = \${angleStep};

float outlineMaxAlphaAtPos(vec2 pos) {
    if (uThickness.x == 0. || uThickness.y == 0.) {
        return 0.;
    }

    vec4 displacedColor;
    vec2 displacedPos;
    float maxAlpha = 0.;

    for (float angle = 0.; angle <= DOUBLE_PI; angle += ANGLE_STEP) {
        displacedPos.x = vTextureCoord.x + uThickness.x * cos(angle);
        displacedPos.y = vTextureCoord.y + uThickness.y * sin(angle);
        displacedColor = texture2D(uSampler, clamp(displacedPos, filterClamp.xy, filterClamp.zw));
        maxAlpha = max(maxAlpha, displacedColor.a);
    }

    return maxAlpha;
}

void main(void) {
    vec4 sourceColor = texture2D(uSampler, vTextureCoord);
    vec4 contentColor = sourceColor * float(!uKnockout);
    float outlineAlpha = uAlpha * outlineMaxAlphaAtPos(vTextureCoord.xy) * (1.-sourceColor.a);
    vec4 outlineColor = vec4(vec3(uColor) * outlineAlpha, outlineAlpha);
    gl_FragColor = contentColor + outlineColor;
}
`;const r=class extends i.Filter{constructor(o=1,e=0,t=.1,n=1,a=!1){super(l,u.replace(/\$\{angleStep\}/,r.getAngleStep(t))),this._thickness=1,this._alpha=1,this._knockout=!1,this.uniforms.uThickness=new Float32Array([0,0]),this.uniforms.uColor=new Float32Array([0,0,0,1]),this.uniforms.uAlpha=n,this.uniforms.uKnockout=a,Object.assign(this,{thickness:o,color:e,quality:t,alpha:n,knockout:a})}static getAngleStep(o){const e=Math.max(o*r.MAX_SAMPLES,r.MIN_SAMPLES);return(Math.PI*2/e).toFixed(7)}apply(o,e,t,n){this.uniforms.uThickness[0]=this._thickness/e._frame.width,this.uniforms.uThickness[1]=this._thickness/e._frame.height,this.uniforms.uAlpha=this._alpha,this.uniforms.uKnockout=this._knockout,o.applyFilter(this,e,t,n)}get alpha(){return this._alpha}set alpha(o){this._alpha=o}get color(){return i.utils.rgb2hex(this.uniforms.uColor)}set color(o){i.utils.hex2rgb(o,this.uniforms.uColor)}get knockout(){return this._knockout}set knockout(o){this._knockout=o}get thickness(){return this._thickness}set thickness(o){this._thickness=o,this.padding=o}};let s=r;s.MIN_SAMPLES=1,s.MAX_SAMPLES=100,exports.OutlineFilter=s;
//# sourceMappingURL=filter-outline.js.map
